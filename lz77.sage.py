

# This file was *autogenerated* from the file lz77.sage
from sage.all_cmdline import *   # import sage library

_sage_const_4 = Integer(4); _sage_const_8 = Integer(8); _sage_const_0 = Integer(0); _sage_const_3 = Integer(3); _sage_const_1 = Integer(1)
def compress(image_bytestream, byte_len):
    search_buffer = _sage_const_4  # define the search buffer
    lookahead_buffer = _sage_const_8  # define the look-ahead buffer

    compressed = []

    position = _sage_const_0 

    while position<byte_len:
        match_len = _sage_const_0 
        match_offset = _sage_const_0 

        window_start = max(_sage_const_0 , position - search_buffer)


        for length in range(_sage_const_3 , min(lookahead_buffer, byte_len -position) + _sage_const_1 ):

            pattern = image_bytestream[position:position +length]
            window = image_bytestream[window_start:position]
            window_pos = window.rfind(pattern)

            if window_pos != -_sage_const_1  and length > match_len:
                match_len = length
                match_offset = len(window) - window_pos

        if match_len >=_sage_const_3  and position + match_len < byte_len:
            next_byte = image_bytestream[position + match_len]
        else: next_byte = _sage_const_0 

        if match_len >=_sage_const_3 :
            compressed.append((match_offset, match_len, next_byte))
            position += _sage_const_1 
        else:
            compressed.append((_sage_const_0 , _sage_const_0 ,image_bytestream[position]))
            position += _sage_const_1 


    return compressed

